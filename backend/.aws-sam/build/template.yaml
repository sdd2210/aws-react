AWSTemplateFormatVersion: 2010-09-09
Description: aws-cognito-test
Transform:
- AWS::Serverless-2016-10-31
Globals:
  Function:
    Timeout: 3
  Api:
    Cors:
      AllowMethods: '''DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'''
      AllowHeaders: '''Content-Type,X-Amz-Date,X-Amz-Security-Token,Authorization,X-Api-Key,X-Requested-With,Accept,Access-Control-Allow-Methods,Access-Control-Allow-Origin,Access-Control-Allow-Headers'''
      AllowOrigin: '''*'''
Resources:
  APIWebSocket:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: aws-cognito-test
      ProtocolType: WEBSOCKET
      RouteSelectionExpression: $request.body.action
  ConnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId:
        Ref: APIWebSocket
      RouteKey: $connect
      AuthorizationType: NONE
      OperationName: ConnectRoute
      Target:
        Fn::Join:
        - /
        - - integrations
          - Ref: ConnectInteg
  ConnectInteg:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId:
        Ref: APIWebSocket
      Description: Connect Integration
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${OnConnectFunction.Arn}/invocations
  DisconnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId:
        Ref: APIWebSocket
      RouteKey: $disconnect
      AuthorizationType: NONE
      OperationName: DisconnectRoute
      Target:
        Fn::Join:
        - /
        - - integrations
          - Ref: DisconnectInteg
  DisconnectInteg:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId:
        Ref: APIWebSocket
      Description: Disconnect Integration
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${OnDisconnectFunction.Arn}/invocations
  SendRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId:
        Ref: APIWebSocket
      RouteKey: message
      AuthorizationType: NONE
      OperationName: SendRoute
      Target:
        Fn::Join:
        - /
        - - integrations
          - Ref: SendInteg
  SendInteg:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId:
        Ref: APIWebSocket
      Description: Send Integration
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SendMessageFunction.Arn}/invocations
  OnConnectFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/OnConnect/onconnect.handler
      Runtime: nodejs12.x
      Policies:
      - AmazonAPIGatewayInvokeFullAccess
      - AmazonAPIGatewayAdministrator
      - AmazonDynamoDBFullAccess
      CodeUri: OnConnectFunction
  OnConnectPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
    - APIWebSocket
    - OnConnectFunction
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Ref: OnConnectFunction
      Principal: apigateway.amazonaws.com
  OnDisconnectFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/OnDisconnect/ondisconnect.handler
      Runtime: nodejs12.x
      Policies:
      - AmazonAPIGatewayInvokeFullAccess
      - AmazonAPIGatewayAdministrator
      - AmazonDynamoDBFullAccess
      CodeUri: OnDisconnectFunction
  OnDisconnectPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
    - APIWebSocket
    - OnDisconnectFunction
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Ref: OnDisconnectFunction
      Principal: apigateway.amazonaws.com
  SendMessageFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/SendMessage/sendmess.handler
      Runtime: nodejs12.x
      Policies:
      - AmazonAPIGatewayInvokeFullAccess
      - AmazonAPIGatewayAdministrator
      - AmazonDynamoDBFullAccess
      CodeUri: SendMessageFunction
  SendMessagePermission:
    Type: AWS::Lambda::Permission
    DependsOn:
    - APIWebSocket
    - SendMessageFunction
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Ref: SendMessageFunction
      Principal: apigateway.amazonaws.com
  Deployment:
    Type: AWS::ApiGatewayV2::Deployment
    DependsOn:
    - ConnectRoute
    - SendRoute
    - DisconnectRoute
    Properties:
      ApiId:
        Ref: APIWebSocket
  Stage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      StageName: Prod
      DeploymentId:
        Ref: Deployment
      ApiId:
        Ref: APIWebSocket
  UserDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: user_register
      AttributeDefinitions:
      - AttributeName: id
        AttributeType: S
      KeySchema:
      - AttributeName: id
        KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
  ApiGatewayApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: aws-cognito-test
      StageName: Prod
      GatewayResponses:
        UNAUTHORIZED:
          StatusCode: 401
          ResponseParameters:
            Headers:
              Access-Control-Allow-Origin: '''*'''
        ACCESS_DENIED:
          StatusCode: 403
          ResponseParameters:
            Headers:
              Access-Control-Allow-Origin: '''*'''
        DEFAULT_5XX:
          StatusCode: 500
          ResponseParameters:
            Headers:
              Access-Control-Allow-Origin: '''*'''
        RESOURCE_NOT_FOUND:
          StatusCode: 404
          ResponseParameters:
            Headers:
              Access-Control-Allow-Origin: '''*'''
        DEFAULT_4XX:
          StatusCode: 400
          ResponseParameters:
            Headers:
              Access-Control-Allow-Origin: '''*'''
      Auth:
        AddDefaultAuthorizerToCorsPreflight: false
        DefaultAuthorizer: CognitoAuthorizer
        Authorizers:
          CognitoAuthorizer:
            UserPoolArn: arn:aws:cognito-idp:us-west-2:812805548152:userpool/us-west-2_YVfJZ06AC
  CreateUsersFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/CreateUser/createuser.handler
      Runtime: nodejs12.x
      MemorySize: 128
      Timeout: 100
      Description: A simple example includes a HTTP get method to post user via cognito
        to a DynamoDB table.
      Policies:
      - AmazonAPIGatewayInvokeFullAccess
      - AmazonAPIGatewayAdministrator
      - AmazonDynamoDBFullAccess
      Environment:
        Variables:
          USERTABLE:
            Ref: UserDBTable
      Events:
        ProxyApiRoot:
          Type: Api
          Properties:
            RestApiId:
              Ref: ApiGatewayApi
            Path: /user
            Method: POST
            Auth:
              Authorizer: CognitoAuthorizer
      CodeUri: CreateUsersFunction
  GetMessageFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/GetMessage/getmess.handler
      Runtime: nodejs12.x
      MemorySize: 128
      Timeout: 100
      Description: A simple example includes a HTTP get method to post user via cognito
        to a DynamoDB table.
      Policies:
      - AmazonAPIGatewayInvokeFullAccess
      - AmazonAPIGatewayAdministrator
      - AmazonDynamoDBFullAccess
      Events:
        ProxyApiRoot:
          Type: Api
          Properties:
            RestApiId:
              Ref: ApiGatewayApi
            Path: /chat
            Method: GET
            Auth:
              Authorizer: CognitoAuthorizer
      CodeUri: GetMessageFunction
  RecieveTextFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/RecieveText/recieve-text.handler
      Runtime: nodejs12.x
      MemorySize: 128
      Timeout: 30
      Description: recieve text from queue.
      Policies:
      - AmazonSQSFullAccess
      - AmazonAPIGatewayInvokeFullAccess
      - AmazonAPIGatewayAdministrator
      - AmazonDynamoDBFullAccess
      Events:
        MySQSEvent:
          Type: SQS
          Properties:
            Queue:
              Fn::GetAtt:
              - InboundEventsQueue
              - Arn
            BatchSize: 10
      CodeUri: RecieveTextFunction
  getAllItemsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/GetAllItems/hexalGetItems.handler
      Runtime: nodejs12.x
      MemorySize: 128
      Timeout: 100
      Description: A simple example includes a HTTP get method to get all items from
        a DynamoDB table.
      Policies:
      - DynamoDBCrudPolicy:
          TableName: Products
      Environment:
        Variables:
          SAMPLE_TABLE: Products
      Events:
        ProxyApiRoot:
          Type: Api
          Properties:
            RestApiId:
              Ref: ApiGatewayApi
            Path: /products
            Method: GET
            Auth:
              Authorizer: CognitoAuthorizer
      CodeUri: getAllItemsFunction
  getByIdFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/getById/hexalGetItembyId.handler
      Runtime: nodejs12.x
      MemorySize: 128
      Timeout: 100
      Description: A simple example includes a HTTP get method to get one item by
        id from a DynamoDB table.
      Policies:
      - DynamoDBCrudPolicy:
          TableName: Products
      Environment:
        Variables:
          SAMPLE_TABLE: Products
      Events:
        ProxyApiRoot:
          Type: Api
          Properties:
            RestApiId:
              Ref: ApiGatewayApi
            Path: /products/{id}
            Method: GET
            Auth:
              Authorizer: CognitoAuthorizer
      CodeUri: getByIdFunction
  putItemFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/PutItem/hexalPut.handler
      Runtime: nodejs12.x
      MemorySize: 128
      Timeout: 100
      Description: A simple example includes a HTTP post method to add one item to
        a DynamoDB table.
      Policies:
      - DynamoDBCrudPolicy:
          TableName: Products
      Environment:
        Variables:
          SAMPLE_TABLE: Products
      Events:
        ProxyApiRoot:
          Type: Api
          Properties:
            RestApiId:
              Ref: ApiGatewayApi
            Path: /products
            Method: POST
            Auth:
              Authorizer: CognitoAuthorizer
      CodeUri: putItemFunction
  updateItemFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/UpdateItem/hexalUpdateItem.handler
      Runtime: nodejs12.x
      MemorySize: 128
      Timeout: 100
      Description: A simple example includes a HTTP post method to add one item to
        a DynamoDB table.
      Policies:
      - DynamoDBCrudPolicy:
          TableName: Products
      Environment:
        Variables:
          SAMPLE_TABLE: Products
      Events:
        ProxyApiRoot:
          Type: Api
          Properties:
            RestApiId:
              Ref: ApiGatewayApi
            Path: /products
            Method: PUT
            Auth:
              Authorizer: CognitoAuthorizer
      CodeUri: updateItemFunction
  deleteItemFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/deleteItem/hexalDelete.handler
      Runtime: nodejs12.x
      MemorySize: 128
      Timeout: 100
      Description: A simple example includes a HTTP post method to add one item to
        a DynamoDB table.
      Policies:
      - DynamoDBCrudPolicy:
          TableName: Products
      Environment:
        Variables:
          SAMPLE_TABLE: Products
      Events:
        ProxyApiRoot:
          Type: Api
          Properties:
            RestApiId:
              Ref: ApiGatewayApi
            Path: /products/{id}
            Method: DELETE
            Auth:
              Authorizer: CognitoAuthorizer
      CodeUri: deleteItemFunction
  sendtextFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/SendText/send-text.handler
      Runtime: nodejs12.x
      MemorySize: 128
      Timeout: 100
      Description: A simple example includes a HTTP post method to add one item to
        a DynamoDB table.
      Policies:
      - AmazonSQSFullAccess
      - AmazonDynamoDBFullAccess
      - AmazonAPIGatewayInvokeFullAccess
      - AmazonAPIGatewayAdministrator
      Environment:
        Variables:
          QUEUE_URL:
            Ref: InboundEventsQueue
      Events:
        ProxyApiRoot:
          Type: Api
          Properties:
            RestApiId:
              Ref: ApiGatewayApi
            Path: /chat
            Method: POST
            Auth:
              Authorizer: CognitoAuthorizer
      CodeUri: sendtextFunction
  InboundEventsQueue:
    Type: AWS::SQS::Queue
  SampleTable:
    Name: Products
    Type: AWS::Serverless::SimpleTable
    Properties:
      PrimaryKey:
        Name: id
        Type: String
      ProvisionedThroughput:
        ReadCapacityUnits: 2
        WriteCapacityUnits: 2
Outputs:
  WebEndpoint:
    Description: API Gateway endpoint URL for Prod stage
    Value:
      Fn::Sub: https://${ApiGatewayApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/
  WebSocketEndpoint:
    Description: Websocket API endpoint URL for Prod stage
    Value:
      Fn::Sub: wss://${APIWebSocket}.execute-api.${AWS::Region}.amazonaws.com/Prod/
